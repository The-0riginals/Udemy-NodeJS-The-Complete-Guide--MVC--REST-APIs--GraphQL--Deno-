https://stripe.com/docs/payments/checkout/migrating-prices?integration=server
Stripe working solution may 2023
13 upvotes
Daniel · Lecture 357 · 6 months ago
This is a solution that worked for me.

I did this by first writing Max's code exactly as it is currently in the video.



By googling the errors that then arose, I came to a post on Stackoverflow:

https://stackoverflow.com/questions/70133656/stripe-create-checkout-session-only-with-total-price



I used the solution described there in my code and adapted it to the state of our current node application.



The only thing that basically had to be changed is the configuration object we create in the shop controller for our stripe session.



After a first adaptation there were still errors related to the transmission of float prices of a product.

I solved this with parseInt().

The second were rounding errors which caused the cent amounts to be one cent different in Stripe than in my application.

I solved this with Math.ceil().



Here is my getCheckout action in the shop controller. I kept the old original code from Max commented out so you can compare the two configuration objects for the session.

controller/shop.js

exports.getCheckout = (req, res, next) => {

    let products;

    let total = 0;

    req.user

        .populate("cart.items.productId")

        .then((user) => {

            console.log(user.cart.items);

            products = user.cart.items;



            products.forEach((p) => {

                total += +p.quantity * +p.productId.price;

            });



            // Old code Max video: Didn't work

            // return stripe.checkout.sessions.create({

            //  payment_method_types: ["card"],

            //  line_items: products.map((p) => {

            //      return {

            //          name: p.productId.title,

            //          description: p.productId.description,

            //          price: p.productId.price * 100, // Price in cents

            //          currency: "eur",

            //          quantity: p.quantity,

            //      };

            //  }),

            //     success_url: req.protocol + "://" + req.get("host") + "/checkout/success",// => http://localhost:3000

            //     cancel_url: req.protocol + "://" + req.get("host") + "/checkout/cancel",

            // });



            return stripe.checkout.sessions.create({

                line_items: products.map(p => {

                    return  {

                        price_data: {

                          currency: "eur",

                          unit_amount: parseInt(Math.ceil(p.productId.price * 100)),

                          product_data: {

                            name: p.productId.title,

                            description: p.productId.description,

                          },

                        },

                        quantity: p.quantity,

                      }

                    }),

                    mode: "payment",

                    success_url: req.protocol + "://" + req.get("host") + "/checkout/success",// => http://localhost:3000,

                    cancel_url: req.protocol + "://" + req.get("host") + "/checkout/cancel",

              });

        })

        .then((session) => {

            res.render("shop/checkout", {

                pageTitle: "Checkout",

                path: "/checkout",

                products: products,

                totalSum: total.toFixed(2),

                sessionId: session.id,

            });

        })

        .catch((err) => {

            const error = new Error(err);

            error.httpStatusCode = 500;

            return next(error);

        });

};