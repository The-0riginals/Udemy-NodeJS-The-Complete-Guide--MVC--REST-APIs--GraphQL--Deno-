https://github.com/Anik7303/nodejs-the-complete-guide

Node js role in Web development
- run server:  create Server & Listen to in coming requests
- Business logic : Handle request, Validate input, Connect to Database
- Responses: Return Responses ( Rendered HTML , Json,...)

alternatives: pytjhon(Django), Php, ruby, Asp.net

Some of the main disadvantages:
1. Node isn't very good at hardcore CPU intensive tasks like crunching a lot of numbers or cryptography.
2. Its single-threaded nature makes it harder to utilize multiple cores since the only way to use multiple cores is to create multiple processes which isn't ideal.
3. Asynchronous code is hard to reason about and most of the stuff you'll be doing with Node is async. It's better than working with threads like you do in Java/C++, but there are languages that do it better like Go.
Node is great at doing I/O though which makes it a really good choice for building websites. As long as performance or parallel processing aren't the crux of the issue, then Node is a contender. The performance part can be alleviated by using web workers or AWS Lambda

Your misunderstanding is extremely common. Many people are taught that multithreading and asynchrony are the same thing, but they are not.

An analogy usually helps. You are cooking in a restaurant. An order comes in for eggs and toast.

● Synchronous: you cook the eggs, then you cook the toast.

● Asynchronous, single threaded: you start the eggs cooking and set a timer. You start the toast cooking, and set a timer. While they are both cooking, you clean the kitchen. When the timers go off you take the eggs off the heat and the toast out of the toaster and serve them.

● Asynchronous, multithreaded: you hire two more cooks, one to cook eggs and one to cook toast. Now you have the problem of coordinating the cooks so that they do not conflict with each other in the kitchen when sharing resources. And you have to pay them."

NodeJS is single-threaded rather than synchronous, meaning the event loop runs on the same thread as everything else.

section 3: summary
*)How  the Web work:
 client-> request -> server -> response -> client
*) Program lifecycle & event loop
- nodejs runs non-blocking js code and uses an event-driven code("Event Loop") for running your logic
- A node program exirs as soon as there is no more work to do
- note: The CreateServer() event never finish by default
*) Asynchronous Code
- Js code is non-blocking 
- Use callbacks and events => Orders changes!
*) Requests & Responses
- Parse request data in chunks(Stream & Buffers)
- avoid "double responses"
*) NodeJS & Core modules
- Nodejs ships with multiple core modules(http,fs, path,..)
- Code modules can be imported into any file to be used there
- import via require('module')
*) The Node module system
- Import via require('./path-to-file') for custom files or require('module') for core & third-party modules
- Export via module.export or just exports( for multiple exports)

-> https://viblo.asia/p/xu-ly-dong-thoi-10000-request-trong-nodejs-BQyJKR3M4Me?fbclid=IwAR27ikb9XnkJ-_bnuij8T7Mzprpsnb0yK9Ll1p86004eZPLTHdWTiAL_EVA


*)Global Features vs Core Modules vs Third-Party Modules
You can basically differentiate between:
- Global features: Keywords like const or function but also some global objects like process
- Core Node.js Modules: Examples would be the file-system module ("fs"), the path module ("path") or the Http module ("http")
- Third-party Modules: Installed via npm install - you can add any kind of feature to your app via this way

+Global features are always available, you don't need to import them into the files where you want to use them.

+Core Node.js Modules don't need to be installed (NO npm install is required) but you need to import them when you want to use features exposed by them.
Example:
const fs = require('fs');
You can now use the fs object exported by the "fs" module..

+Third-party Modules need to be installed (via npm install in the project folder) AND imported.
Example (which you don't need to understand yet - we'll cover this later in the course):
// In terminal/ command prompt
npm install --save express-session
// In code file (e.g. app.js)
const sessions = require('express-session');

*) type of error: syntax error; rumtime error; logic error
*)

//section 5

express.js
- server logic is complex!
- you want to focus on ur bussiness logic not the nitty gitty details
- Use a framework for the heavy lifting
+Framework: helper functions ,tools,rules that help u build ur application
-alternative: vanilla nodejs,adonis,koa,sails,Nest. js,...

*) middleware
				     [next()]	         [res.send()]
	request  ->	middleware	->	 middleware	->	response ->
		   (req,res,next)=>{...}    (req,res,next)=>{...}

*) what is Express.js?
- Express.js is Nodejs framework - a packet that adds a bunch of utility functions and tools and a clear set of rules an how app should be build(middleware)!
- its highly extensible and other packages acan be plugged into it(middleware!)

*)Middleware, next() and res()
-Express,js relies heavily on middleware functions-you can easily add them by calling use()
-Middleware functions handle a request and should call next() to forward the request to the next function in line or send a response

*) Routing
-You can filter requests by path and  method 
- If you filter by method, paths are matched exactly,otherwisem, the first segment of URL is matched
- you can use express.router to split your routes across files elegantely

*)Serve files
- you are not limited to serving dummy text as response
- you can sendFile()s to your users-eg: HTML files
- if a request is directly makefor a file (e.g a .css file is requested),you can enable static serving for such files via express.static().

//------------------------------
// Section 7: MVC : Model-View-Controller
- Models: 
+ are basically objects or is a part of your code that responsible for representing your data
+ allow you to work/manager with data(e.g: save,fetch,..)
+ doesnt matter if you manage data in memory,files,databases
+ contain data logics
- Views: 
+ responsible for what user sees in the end, redering right content in our html documents and sends bit back
+ Decoupleed from your application code
+ shouldn't contain too much logic(handlebars)
-Controlers: 
+ Connecting your Models and your Views
+ contains the "in-between logic"
+ should only make sure that two can communcate(both dicrections)
*) Routes: decide with model work , and with view to render

//------------------------------
// Section 9: Dynamic routes & advanced model
- Dynamic Routing
+ You can pass dynamic path segments by adding a ":" to the Express router path
ex: router.get('/products/:productId', shopController.getProduct);
+ The name you add after ":" is the name by which you can extract the data on req.params
ex: exports.getProduct = (req, res, next) => {
    const prodId = req.params.productId; ...
+ Optional (query) parameters can also be passed (?param=value&b=2) and extracted( req.query.myParam)
ex: /admin/edit-product/0?edit=true
    exports.getEditProduct = (req, res, next) => {
    const editMode = req.query.edit;
- More on Models
+ A Cart model was added - it holds static methods only
+ You can interact between models(e.g delete cart item if a product is deleted)
+ Working with files for data storage is suboptional for bigger amounts of data

//------------------------------
//section 10: SQL introdution
- Goal:  store Data and make it easily accessible => use a Database(quicker access than a file
+ SQL Database : Mysql, sql server,..
+ No SQL: mongoDB,..
- SQL: Structured Query Language
+ SQL is a language to interact with databases
+ SQL is used to store and retrieve data from databases
+ SQL is a standard language for accessing and manipulating databases

- SQL databases:
+ SQL databases have predefined schema( each table clearly defines what columns it has and what data type each column can have)
+ SQL databases are table based
+ SQL databases are better for multi-row transactions
+ SQL databases are relational( data is stored in tables and can be linked using foreign keys: one-to-one, one-to-many, many-to-many)
+ SQL databases are vertically scalable
ex sql query: Select * from products where price > 10

- NoSQL
+ table are called collections, instead of rows, we have documents(ex: {name: 'Max', age: 29},{name: 'Manu', age: 30})
  it doesnt have to be the same structure (no schema)
+ NoSQL databases are document, key-value, graph or wide-column stores
+ NoSQL databases are better for unstructured data like documents or JSON
+ NoSQL databases are non-relational (so it could be duplicated or nested/merged)
  or distributed (data is spread across multiple servers)
+ NoSQL databases are horizontally scalable, but vertically still possible
+ NoSQL databases have dynamic schema for unstructured data

*)  Horizonal vs Vertical Scaling
- Horizonal Scaling:
+ Add more servers (more machines) and merge Data into one Database
+ Horizontal scaling means breaking up your data and storing it across multiple servers
(SQL is naturally bad at this because it makes strong guarantees about its data's consistency so everything needs to be synchronized across all shards which requires a lot of communication between them.)
- Vertical Scaling:
+ Add more power to the existing server (more RAM, CPU, etc.)

//------------------------------
//section 11: Sequelize
- Sequelize
+ Sequelize is an ORM(Object Relational Mapper) library for Node.js
+ Sequelize allows you to interact with different SQL databases in an easier way: you don't have to write SQL queries, you can just use JavaScript
+ Sequelize is a promise-based Node.js ORM for Postgres, MySQL, MariaDB, SQLite and Microsoft SQL Server
+ Sequelize allows you to define models, interact with database through them and associations between them

- core concepts
+ Models: represent a table in the database ,e.g: Product, User, Order,..
+ Instances: are rows in the table , e.g: User.create()
+ Associations: define the associations between models, e.g: User.hasMany(Product)
+queries: are used to fetch data from a table in the database , e.g: User.findAll()

- Associations: relate different models to each other
+ One-to-one: User.hasOne(Cart)
+ One-to-many: Cart.hasMany(Product)
+ Many-to-many: Product.belongsToMany(User, { through: Order })

//------------------------------
//section 12: Working with NoSQL & using MongoDB
- MongoDB
+ MongoDB is a NoSQL database, built for large-scale ,it can store lots and lots of data
+ MongoDB stores data in documents (instead of tables)
+ MongoDB is a document database with the scalability and flexibility that you want with the querying and indexing that you need
+ MongoDB is a distributed database at its core, so high availability, horizontal scaling, and geographic distribution are built in and easy to use

-Nested/ embedded documents
+ Customer:
{
  username: 'Max',
  age: 29,
  address: {
    street: 'Main St',
    city: 'Boston'
  }
}

- references (lots of data duplication)
+ Customer:
{
  username: 'Max',
  favBooks: [{...}, {...}, {...}]
}
+ Customers:
{
  username: 'Max',
  favBooks: ['bookId1', 'bookId2', 'bookId3']
}
+ Books:
{
  _id: 'bookId1',
  title: 'A Great Book'
}

* you CAN relate data in MongoDB but you should avoid it as much as possible or your queries will get very complex and slow

- MongoDB alas
+ MongoDB Atlas is a fully-managed cloud database developed by the same people that build MongoDB
+ MongoDB Atlas handles all the complexity of deploying, managing, and healing your deployments on the cloud service provider of your choice (AWS, Azure, and GCP)
+ MongoDB Atlas is the easiest way to deploy, operate, and scale MongoDB in the cloud

* summary:
+ MongoDB/NoSQL database alternative to SQL
+ no strict schema, fewer relations
+ you can of course use schemas and reference-based relations but got more flexibility
+ often, relations are alse created by embedding other documents/data

+ Use the official MongoDB driver or Mongoose to interact with MongoDB in Node.js
+ commands like insertOne(), find(), updateOne(), deleteOne() are available and make CRUD operations easy (CRUD = Create, Read, Update, Delete)
//------------------------------
//section 13: Working with Mongoose
- Mongoose
+ Mongoose is an ODM(Object Document Mapping) library for Node.js and MongoDB
+ A Mongoose schema is a document data structure (or shape of the document) that is enforced via the application layer
ex:
instead of (native driver):
db.collection('users').insertOne({username: 'Max', age: 29, email: ''})
we can use:
User.create({username: 'Max', age: 29, email: ''})
-core concepts
+ schemas and models: eg: User, Product, Order,..
+ Instances: const user = new User({username: 'Max', age: 29, email: ''})
+ queries: eg: User.find(), User.findOne(), User.findById(),..

//------------------------------
//section 14: Sessions & Cookies
- Cookies
+ Cookies are small pieces of data that are stored on the client-side and are sent along with requests
+ Cookies are stored in the browser and are sent along with requests
eg:
Set-Cookie: cart=abcde12345; Max-Age=3600; Domain=example.com; Path=/; Secure; HttpOnly

- Sessions
+ Sessions are a way to store data on the server-side (instead of the client-side as cookies do)
+ Sessions are stored on the server and are referenced via a cookie (sessionId - hash ID)// associated with user/client via cookie

//summary
- Cookies
+ great for storing data on client(browser)
+ do NOT store sensitive data here! it can be viewed and manipulated by the user
+ can be configured to expire when the browser is closed or at a specific date/age is reached
+ work well with Sessions

- Sessions
+ Stored on the server, NOT on the client
+ Great storing sensitive data that should survive across requests
+ You can store Anything in sessions
+ Often used for storing user data/authentication status
+ Identified via a cookie (sessionId)
+ You can use different storages for saving your sessions (e.g. MongoDB, Redis, etc.)

//------------------------------
//section 15: Authentication
- Authentication
+ Authentication is the process of verifying who a user is
+ Authorization is the process of verifying what they have access to
eg:
Authentication: checking and handling the login state
Authorization: Access to certain resources
- implementing authentication: 
+ user sends credentials (username, password) to the server, 
+ server checks if they are valid and returns a response(200)
+ create a session for the user and store it on the server
+ send a cookie to the client (sessionId)
+ client sends cookie along with each request
+ server checks if the cookie is valid and authenticates the user

- CSRF attacks
+ CSRF stands for Cross-Site Request Forgery
+ CSRF attacks are attacks that are performed on behalf of a logged-in user
+ CSRF attacks are possible because cookies are sent along with each request
(eg: you are logged in to your bank account and visit a malicious website that sends a request to your bank account and transfers money to the attacker's account)

- CSRF attacks can be prevented by using CSRF tokens
+ CSRF tokens are unique tokens that are generated for each user and sent along with each request
+ The server checks if the token is valid and only then processes the request
(this way, the malicious website can't send a valid request to server because it doesn't know the token)

*) summary:
+ Authentication means that not every visitor can view and interact with everything
+ Authentication has to happen on the server side and builds up on sessions
+ You can protect routes by checking the (session-controlled) login status right before you access a controller action

+ passwords should be hashed
+ csrf attacks are real issue and you should protect your app against them for your application's security
+ for a better user experience, you can flash data/messages into session which you then can display in your views

//------------------------------
//section 16: Sending Emails
- Sending Emails
+ Emails are sent via SMTP(Simple Mail Transfer Protocol) servers
+ You can use Nodemailer to send emails from Node.js
+ You can use Mailtrap to test your emails in a sandbox environment
+ just use the nodemailer package Mailtrap is now for real emails

//------------------------------
//section 17: Advanced Authentication
- Password Reset
+ Password reset is a common feature in web applications
+ Reset password tokens have to be random, unguessable and unique

- Authorization
+ Authorization is the process of verifying what a user has access to
+ not every user should be able to edit or delete every resource

//------------------------------
//section 18: understand validation
- Validation
+ Validation is the process of ensuring that data is correct and valid
+ Validation can happen on the client-side and on the server-side
+ Validation on the client-side is optional and should only be used for a better user experience
+ Validation on the server-side is mandatory and should always be implemented

- Santization data
+ Santization is the process of removing unwanted characters from data(eg: removing HTML tags from a text) 
+ uniform data: lower word or remove whitespaces
+ Santization should always happen on the server-side
+ Santization is a great way to prevent XSS attacks

//------------------------------
//section 19: Error handling
- Error handling
+ Errors can happen everywhere in your application
+ Errors can be thrown or passed to a callback
+ Errors should be handled in a central place
+ Errors should be logged
+ Errors should be presented to the user in a friendly way

- different types of errors
+ Technical / Network errors: database connection lost, server down, etc. -> show error page
+ "Expected" errors: file can't be read, database operations fails, user input invalid, etc. -> inform user, possibly retry
+ Bugs/logical errors: User object used when it doesn't exist, etc. -> fix during development

+ with synchronized code, you can use try-catch blocks to catch errors
+ with asynchronized code, you can use the error-first callback pattern to catch errors(then/catch or async/await)
+ you can use the Express error handling middleware to catch errors in Express apps and handle them 

- setting status code
+ 200: OK, 201: Created, 204: No Content,...
+ 400: Bad Request, 401: Unauthorized, 403: Forbidden, 404: Not Found,...
+ 500: Internal Server Error, 502: Bad Gateway, 503: Service Unavailable,...
+ Setting the right status code is important for SEO and user experience

//------------------------------
//section 20: File Upload & Download
- File Upload
+ File upload is a common feature in web applications
+ Files can be uploaded via a form or via an API endpoint
+ Files can be stored on the server or on a cloud storage service like AWS S3
+ Files can be stored in a database (not recommended)
+ In this course, we'll use the 'multer' package to handle file uploads

- File Download
+ Files can be downloaded via a link or via an API endpoint
+ Files can be stored on the server or on a cloud storage service like AWS S3
+ Files can be stored in a database (not recommended)
+ In this course, we'll use the 'pdfkit' package to generated PDF files

//------------------------------
//section 21: Pagination
- Pagination
+ Pagination is a common feature in web applications
+ Pagination is used to split up a large amount of data into multiple pages
+ Pagination is often used for tables and lists
+ Pagination can be implemented on the client-side and on the server-side
+ Pagination on the client-side is optional and should only be used for a better user experience
+ Pagination on the server-side is mandatory and should always be implemented

//------------------------------
//section 22: Async Requests
- Async Requests
+ Async requests are requests that are sent in the background (not rending or redirecting the page)
+ Async requests are often used to update a page without reloading it
+ Async requests can be sent via XMLHttpRequest or via the Fetch API
+ Async requests can be sent to any URL (not just API endpoints)
+ Async requests can be used to send data to the server or to fetch data from the server

- Fetch API
+ The Fetch API is a modern replacement for XMLHttpRequest
+ The Fetch API is promise-based
+ The Fetch API is built into the browser
+ The Fetch API is easy to use and supports all modern features (like async/await)

//------------------------------


